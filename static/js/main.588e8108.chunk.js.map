{"version":3,"sources":["validation.js","Input.js","Button.js","StepOne.js","StepTwo.js","StepThree.js","Review.js","Modal.js","App.js","serviceWorker.js","index.js"],"names":["OPTIONS","value","label","stepOneSchema","yup","shape","firstName","required","lastName","email","phone","stepTwoSchema","lineOne","lineTwo","city","state","zip","stepThreeSchema","commentSubject","oneOf","comment","max","InputContainer","styled","div","_templateObject","Label","_templateObject2","Field","input","_templateObject3","p","hasError","ErrorMessage","_templateObject4","Hint","small","_templateObject5","Input","_ref","name","handleChange","handleBlur","type","errorMessage","placeholder","hint","react_default","a","createElement","htmlFor","concat","id","onBlur","onChange","Button","button","Button_templateObject","StepOne","initialValues","currentStep","setFormValues","formik_esm","onSubmit","values","_ref2","setSubmitting","newValues","Object","assign","stepOne","undefined","showModal","validationSchema","props","touched","errors","dirty","isSubmitting","handleSubmit","handleReset","src_Input","src_Button","StepTwo","stepTwo","FieldContainer","StepThree_templateObject","Textarea","textarea","StepThree_templateObject2","StepThree","stepThree","setFieldValue","setFieldTouched","StepThree_CustomSelect","error","rows","CustomSelect","_this","_this$props","this","react_select_esm","options","Boolean","Component","Header","h2","Review_templateObject","DetailContainer","Review_templateObject2","DetailList","ul","Review_templateObject3","Review","userDetails","address","comments","editDetail","objectSpread","setTimeout","alert","JSON","stringify","onClick","bind","Background","Modal_templateObject","ModalBody","Modal_templateObject2","ModalHeader","Modal_templateObject3","ModalContent","Modal_templateObject4","CloseButton","Modal_templateObject5","Modal","children","closeModal","GlobalStyle","createGlobalStyle","App_templateObject","MainContaier","App_templateObject2","WizardPanel","App_templateObject3","Heading","h1","App_templateObject4","defaultState","currentEdit","App","val","setState","e","preventDefault","_this2","_this$state","isStepOne","isStepTwo","isStepThree","isReview","editStepOne","editStepTwo","editStepThree","react","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.588e8108.chunk.js","sourcesContent":["import * as yup from 'yup';\n\nexport const OPTIONS = [\n    { value: 'Staff Feedback', label: 'Staff Feedback' },\n    { value: 'Checkout Feedback', label: 'Checkout Feedback' },\n    { value: 'Product Feedback', label: 'Product Feedback' },\n];\n\nexport const stepOneSchema = yup.object().shape({\n    firstName: yup.string().required(),\n    lastName: yup.string().required(),\n    email: yup\n        .string()\n        .required()\n        .email(),\n    phone: yup.number(),\n});\n\nexport const stepTwoSchema = yup.object().shape({\n    lineOne: yup.string().required(),\n    lineTwo: yup.string(),\n    city: yup.string(),\n    state: yup.string(),\n    zip: yup.number(),\n});\n\nexport const stepThreeSchema = yup.object().shape({\n    commentSubject: yup.mixed().oneOf(OPTIONS),\n    comment: yup.string().max(1000),\n});\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst InputContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 0.75rem;\n`\n\nexport const Label = styled.label`\n    margin-bottom: 0.25rem;\n    font-size: 0.7rem;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    color: darkslategray;\n`\n\nconst Field = styled.input`\n    border-radius: 0.25rem;\n    font-size: 1rem;\n    border: 1px solid darkslategray;\n    padding: 0.5rem;\n    margin-bottom: 0.25rem;\n    ${p => p.hasError ? 'border-color: red;' : ''}\n`\n\nexport const ErrorMessage = styled.p`\n    margin: 0;\n    padding: 0;\n    font-size: 0.75rem;\n    color: red;\n`\n\nconst Hint = styled.small`\n    font-style: italic;\n    color: lightslategray;\n`\n\nconst Input = ({\n    name,\n    label,\n    handleChange,\n    handleBlur,\n    type,\n    value,\n    hasError,\n    errorMessage,\n    placeholder,\n    hint\n}) => (\n    <InputContainer>\n        <Label htmlFor={`${name}-target`}>{label} {hint ? <Hint>{hint}</Hint> : ''}</Label>\n        <Field\n            hasError={hasError}\n            type={type ? type : 'text'}\n            id={`${name}-target`}\n            name={name}\n            value={value}\n            onBlur={handleBlur}\n            onChange={handleChange}\n            placeholder={placeholder}\n        />\n        {hasError && <ErrorMessage>{errorMessage}</ErrorMessage>}\n    </InputContainer>\n);\n\nexport default Input;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n    background-color: lightsalmon;\n    color: white;\n    padding: 0.5rem 0.75rem;\n    border: 0;\n    font-size: 1rem;\n    border-radius: 0.25rem;\n    text-transform: uppercase;\n    cursor: pointer;\n\n    &:hover {\n        background-color: HSL(17, 100%, 52%);\n    }\n`\n\nexport default Button;","import React from 'react';\nimport { Formik } from 'formik';\nimport { stepOneSchema } from './validation';\nimport Input from './Input';\nimport Button from './Button';\n\nexport default ({ initialValues, currentStep, setFormValues}) => (\n    <Formik\n        initialValues={initialValues}\n        onSubmit={(values, { setSubmitting }) => {\n            const newValues = Object.assign(\n                {},\n                {stepOne: values},\n                (currentStep !== undefined && currentStep !== null) ? { currentStep: currentStep + 1} : { showModal: false }\n            );\n            setFormValues(newValues);\n        }}\n        validationSchema={stepOneSchema}>\n        {props => {\n            const {\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                handleReset,\n            } = props;\n            return (\n                <form onSubmit={handleSubmit}>\n                    <Input\n                        name=\"firstName\"\n                        label=\"First Name\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.firstName}\n                        hasError={errors.firstName && touched.firstName}\n                        errorMessage={errors.firstName}\n                    />\n                    <Input\n                        name=\"lastName\"\n                        label=\"Last Name\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.lastName}\n                        hasError={errors.lastName && touched.lastName}\n                        errorMessage={errors.lastName}\n                    />\n\n                    <Input\n                        name=\"email\"\n                        label=\"e-mail\"\n                        type=\"email\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.email}\n                        hasError={errors.email && touched.email}\n                        errorMessage={errors.email}\n                    />\n                    <Input\n                        name=\"phone\"\n                        label=\"phone\"\n                        type=\"tel\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.phone}\n                        hasError={errors.phone && touched.phone}\n                        errorMessage={errors.phone}\n                    />\n                    <Button type=\"submit\">{currentStep !== undefined && currentStep !== null ? 'Next' : 'Update'}</Button>\n                </form>\n            );\n        }}\n    </Formik>\n);\n","import React from 'react';\nimport { Formik } from 'formik';\nimport { stepTwoSchema } from './validation';\nimport Input from './Input';\nimport Button from './Button';\n\nexport default ({ initialValues, currentStep, setFormValues }) => (\n    <Formik\n        initialValues={initialValues}\n        onSubmit={(values, { setSubmitting }) => {\n            const newValues = Object.assign(\n                {},\n                {stepTwo: values},\n                (currentStep !== undefined && currentStep !== null) ? { currentStep: currentStep + 1} : { showModal: false }\n            );\n            setFormValues(newValues);\n        }}\n        validationSchema={stepTwoSchema}>\n        {props => {\n            const {\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                handleReset,\n            } = props;\n            return (\n                <form onSubmit={handleSubmit}>\n                    <Input\n                        name=\"lineOne\"\n                        label=\"Address Line 1\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        hint=\"Street address, P.O. box, company name, c/o\"\n                        value={values.lineOne}\n                        hasError={errors.lineOne && touched.lineOne}\n                        errorMessage={errors.lineOne}\n                    />\n                    <Input\n                        name=\"lineTwo\"\n                        label=\"Address Line 2\"\n                        handleChange={handleChange}\n                        hint=\"Apartment, suite, unit, bldg, flr, etc...\"\n                        handleBlur={handleBlur}\n                        value={values.lineTwo}\n                        hasError={errors.lineTwo && touched.lineTwo}\n                        errorMessage={errors.lineTwo}\n                    />\n                    <Input\n                        name=\"city\"\n                        label=\"City\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.city}\n                        hasError={errors.city && touched.city}\n                        errorMessage={errors.city}\n                    />\n                    <Input\n                        name=\"state\"\n                        label=\"State\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.state}\n                        hasError={errors.state && touched.state}\n                        errorMessage={errors.state}\n                    />\n                    <Input\n                        name=\"zip\"\n                        label=\"Zip\"\n                        handleChange={handleChange}\n                        handleBlur={handleBlur}\n                        value={values.zip}\n                        hasError={errors.zip && touched.zip}\n                        errorMessage={errors.zip}\n                    />\n                    <Button type=\"submit\">{currentStep !== undefined && currentStep !== null ? 'Next' : 'Update'}</Button>\n                </form>\n            );\n        }}\n    </Formik>\n);\n","import React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport styled from 'styled-components';\nimport Select from 'react-select';\nimport { stepThreeSchema, OPTIONS } from './validation';\nimport Button from './Button';\nimport { Label, ErrorMessage } from './Input';\n\nconst FieldContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 0.5rem;\n`;\n\nconst Textarea = styled.textarea`\n    border-radius: 0.25rem;\n    font-size: 1rem;\n    border: 1px solid darkslategray;\n    padding: 0.5rem;\n    margin-bottom: 0.25rem;\n    ${p => (p.hasError ? 'border-color: red;' : '')};\n`;\n\nexport default ({ initialValues, currentStep, setFormValues }) => (\n    <Formik\n        initialValues={initialValues}\n        onSubmit={(values, { setSubmitting }) => {\n            const newValues = Object.assign(\n                {},\n                {stepThree: values},\n                (currentStep !== undefined && currentStep !== null) ? { currentStep: currentStep + 1} : { showModal: false }\n            );\n            setFormValues(newValues);\n        }}\n        validationSchema={stepThreeSchema}>\n        {props => {\n            const {\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                handleReset,\n                setFieldValue,\n                setFieldTouched\n            } = props;\n            return (\n                <form onSubmit={handleSubmit}>\n                    <CustomSelect\n                        value={values.commentSubject}\n                        onChange={setFieldValue}\n                        onBlur={setFieldTouched}\n                        error={errors.commentSubject}\n                        touched={touched.commentSubject}\n                        />\n                    <FieldContainer>\n                        <Label htmlFor=\"commentBox\">Comment</Label>\n                        <Textarea\n                            onBlur={handleBlur}\n                            onChange={handleChange}\n                            name=\"comment\"\n                            rows={3}\n                            id=\"commentBox\"\n                            hasError={errors.comment && touched.comment}\n                            value={values.comment}\n                        />\n                        {errors.comment && touched.comment ? (\n                            <ErrorMessage>{errors.comment}</ErrorMessage>\n                        ) : null}\n                    </FieldContainer>\n                    <Button type=\"submit\">{currentStep !== undefined && currentStep !== null ? 'Next' : 'Update'}</Button>\n                </form>\n            );\n        }}\n    </Formik>\n);\n\nclass CustomSelect extends Component {\n    handleChange = value => {\n        this.props.onChange('commentSubject', value);\n    }\n\n    handleBlur = value => {\n        this.props.onBlur('commentSubject', value);\n    }\n\n    render() {\n        const { touched, error, value } = this.props;\n        return (\n            <FieldContainer>\n                <Label htmlFor=\"commentSubject\">Subject</Label>\n                <Select\n                    id=\"commentSubject\"\n                    onChange={this.handleChange}\n                    onBlur={this.handleBlur}\n                    value={value}\n                    options={OPTIONS}\n                />\n                { Boolean(error) && touched ? <ErrorMessage>{error}</ErrorMessage> : null }\n            </FieldContainer>\n        );\n    }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Formik } from 'formik';\nimport Button from './Button';\n\nconst Header = styled.h2`\n    font-size: 1.5rem;\n    margin: 0;\n    padding: 0;\n`;\n\nconst DetailContainer = styled.div`\n    margin-bottom: 1rem;\n\n    h3 {\n        text-transform: uppercase;\n        font-size: 0.75rem;\n        letter-spacing: 0.05em;\n    }\n`;\n\nconst DetailList = styled.ul`\n    padding-left: 0.25rem;\n    margin: 0;\n    list-style: none;\n\n    li {\n        margin-bottom: 0.5rem;\n        display: flex;\n        flex-direction: column-reverse;\n\n        span {\n            margin-top: 0.25rem;\n            margin-bottom: 0.5rem;\n            text-transform: uppercase;\n            font-size: 0.75rem;\n            color: lightslategray;\n            letter-spacing: 0.05em;\n        }\n    }\n`;\n\nexport default ({\n    userDetails,\n    address,\n    comments,\n    editDetail,\n    initialValues,\n}) => (\n    <Formik\n        initialValues={{...userDetails, ...address, ...comments}}\n        onSubmit={(values, { setSubmitting }) => {\n            setTimeout(() => {\n                alert(JSON.stringify(values, null, 2));\n                setSubmitting(false);\n            }, 500);\n        }}>\n        {props => {\n            const {\n                values,\n                touched,\n                errors,\n                dirty,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                handleReset,\n            } = props;\n\n            return isSubmitting ? <div>Submitting...</div> : (\n                <form onSubmit={handleSubmit}>\n                    <Header>Review Submission</Header>\n                    <DetailContainer>\n                        <h3>\n                            Details{' '}\n                            <Button onClick={editDetail.bind(null, 0)}>\n                                Edit\n                            </Button>\n                        </h3>\n                        <DetailList>\n                            <li>\n                                <span>First Name</span>\n                                {userDetails.firstName}\n                            </li>\n                            <li>\n                                <span>Last Name</span>\n                                {userDetails.lastName}\n                            </li>\n                            <li>\n                                <span>Email</span>\n                                {userDetails.email}\n                            </li>\n                            <li>\n                                <span>Phone</span>\n                                {userDetails.phone ? userDetails.phone : '—'}\n                            </li>\n                        </DetailList>\n                    </DetailContainer>\n\n                    <DetailContainer>\n                        <h3>\n                            Address{' '}\n                            <Button onClick={editDetail.bind(null, 1)}>\n                                Edit\n                            </Button>\n                        </h3>\n                        <DetailList>\n                            <li>\n                                <span>Address Line One</span>\n                                {address.lineOne ? address.lineOne : '—'}\n                            </li>\n                            <li>\n                                <span>Address Line Two</span>\n                                {address.lineTwo ? address.lineTwo : '—'}\n                            </li>\n                            <li>\n                                <span>City</span>\n                                {address.city ? address.city : '—'}\n                            </li>\n                            <li>\n                                <span>State</span>\n                                {address.state ? address.state : '—'}\n                            </li>\n                            <li>\n                                <span>Zip/Postal Code</span>\n                                {address.zip ? address.zip : '—'}\n                            </li>\n                        </DetailList>\n                    </DetailContainer>\n\n                    <DetailContainer>\n                        <h3>\n                            Comment{' '}\n                            <Button onClick={editDetail.bind(null, 2)}>\n                                Edit\n                            </Button>\n                        </h3>\n                        <DetailList>\n                            <li>\n                                <span>Subject</span>\n                                {comments.commentSubject &&\n                                comments.commentSubject.value\n                                    ? comments.commentSubject.value\n                                    : ''}\n                            </li>\n                            <li>\n                                <span>Message</span>\n                                {comments.comment ? comments.comment : '—'}\n                            </li>\n                        </DetailList>\n                    </DetailContainer>\n                    <Button type=\"submit\">Submit</Button>\n                </form>\n            );\n        }}\n    </Formik>\n);\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst Background = styled.div`\n    position: fixed;\n    overflow: hidden;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgba(0,0,0,0.5);\n`\n\nconst ModalBody = styled.div`\n    max-width: 500px;\n    width: 100%;\n    box-shadow: 8px 2px 8px 0 rgba(0, 0, 0, 0.2);\n    background-color: white;\n    border-radius: 4px;\n    overflow: hidden;\n`\n\nconst ModalHeader = styled.div`\n    background-color: darkslategray;\n    color: white;\n    padding: 0.5rem;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    position: relative;\n`\n\nconst ModalContent = styled.div`\n    background-color: white;\n    padding: 2rem;\n`\n\nconst CloseButton = styled.button`\n    background-color: transparent;\n    font-size: 1.5rem;\n    border: 0;\n    position: absolute;\n    right: 0.5rem;\n    top: 0;\n    cursor: pointer;\n    color: white;\n`\n\nexport default ({children, closeModal}) => <Background>\n    <ModalBody>\n        <ModalHeader>Edit Details <CloseButton onClick={closeModal}>&times;</CloseButton></ModalHeader>\n        <ModalContent>\n        {children}\n        </ModalContent>\n    </ModalBody>\n</Background>","import React, { Component, Fragment } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport StepOne from './StepOne';\nimport StepTwo from './StepTwo';\nimport StepThree from './StepThree';\nimport Review from './Review';\nimport Modal from './Modal';\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        box-sizing: border-box;\n    }\n\n    html,\n    body {\n        font-size: 100%;\n        margin: 0;\n        padding: 0;\n        font-family: sans-serif;\n    }\n`;\n\n/*\n    STEP 1:\n        Contact form with First Name, Last Name, Email, Phone\n    STEP 2:\n        Address with Street 1, Street 2 (Apt, Unit), City, State, Zip\n    STEP 3:\n        Generic comment form\n            Dropdown\n                * Staff Feedback\n                * Checkout Feedback\n                * Product Feedback\n            limit 100 chars\n    STEP 4:\n        Review screen show all answers\n        Edit button will show a modal to edit answers\n*/\n\nconst MainContaier = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n    background-color: gainsboro;\n    padding: 2rem;\n\n    ${p => (p.showModal ? 'overflow: hidden; max-height: 100vh;' : '')};\n`;\n\nconst WizardPanel = styled.div`\n    padding: 2rem 1rem;\n    border-radius: 4px;\n    max-width: 500px;\n    width: 100%;\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.2);\n    border-top: 8px solid darkslategray;\n    background-color: white;\n`;\n\nconst Heading = styled.h1`\n    margin-top: 0;\n    margin-bottom: 1rem;\n    padding: 0;\n    font-size: 1.5rem;\n    color: darkslategray;\n`;\n\nconst defaultState = {\n    stepOne: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n    },\n\n    stepTwo: {\n        lineOne: '',\n        lineTwo: '',\n        city: '',\n        state: '',\n        zip: '',\n    },\n\n    stepThree: {\n        commentSubject: null,\n        comment: '',\n    },\n    currentStep: 0,\n    showModal: false,\n    currentEdit: 0,\n};\n\nclass App extends Component {\n    state = defaultState;\n\n    setFormValues(val) {\n        this.setState(val);\n    }\n\n    editDetail(currentEdit, e) {\n        e.preventDefault();\n        this.setState({\n            showModal: true,\n            currentEdit: currentEdit\n        })\n    }\n\n    render() {\n        const {\n            stepOne,\n            stepTwo,\n            stepThree,\n            currentStep,\n            currentEdit,\n            showModal,\n        } = this.state;\n        const isStepOne = currentStep === 0;\n        const isStepTwo = currentStep === 1;\n        const isStepThree = currentStep === 2;\n        const isReview = currentStep === 3;\n\n        const editStepOne = currentEdit === 0;\n        const editStepTwo = currentEdit === 1;\n        const editStepThree = currentEdit === 2;\n        return (\n            <Fragment>\n                <MainContaier showModal={showModal}>\n                    <WizardPanel>\n                        <Heading>Step {currentStep + 1}</Heading>\n                        {isStepOne && (\n                            <StepOne\n                                initialValues={stepOne}\n                                currentStep={currentStep}\n                                setFormValues={this.setFormValues.bind(this)}\n                            />\n                        )}\n                        {isStepTwo && (\n                            <StepTwo\n                                initialValues={stepTwo}\n                                currentStep={currentStep}\n                                setFormValues={this.setFormValues.bind(this)}\n                            />\n                        )}\n                        {isStepThree && (\n                            <StepThree\n                                initialValues={stepThree}\n                                currentStep={currentStep}\n                                setFormValues={this.setFormValues.bind(this)}\n                            />\n                        )}\n                        {isReview && (\n                            <Review\n                                editDetail={this.editDetail.bind(this)}\n                                userDetails={stepOne}\n                                address={stepTwo}\n                                comments={stepThree}\n                            />\n                        )}\n                    </WizardPanel>\n                    <GlobalStyle />\n                </MainContaier>\n                {showModal && (\n                    <Modal\n                        closeModal={e => {\n                            e.preventDefault();\n                            this.setState({ showModal: false });\n                        }}>\n                        {editStepOne && (\n                            <StepOne\n                                initialValues={stepOne}\n                                setFormValues={this.setFormValues.bind(this)}\n                            />\n                        )}\n                        {editStepTwo && (\n                            <StepTwo\n                                initialValues={stepTwo}\n                                setFormValues={this.setFormValues.bind(this)}\n                            />\n                        )}\n                        {editStepThree && (\n                            <StepThree\n                                initialValues={stepThree}\n                                setFormValues={this.setFormValues.bind(this)}\n                            />\n                        )}\n                    </Modal>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}